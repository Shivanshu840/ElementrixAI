
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  name        String?
  passwordHash String? @map("password_hash")
  provider    String   @default("credentials")
  providerId  String?  @map("provider_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  sessions    Session[]
  accounts    Account[]
  
  @@map("users")
}

model Session {
  id          String      @id @default(uuid())
  userId      Int      @map("user_id")
  title       String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    ChatMessage[]
  components  Component[]
  
  @@map("sessions")
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  sessionId String      @map("session_id")
  role      String
  content   String
  metadata  Json     @default("{}")
  createdAt DateTime @default(now()) @map("created_at")
  
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@map("chat_messages")
}

model Component {
  id          Int      @id @default(autoincrement())
  sessionId   String      @map("session_id")
  name        String
  jsxCode     String   @map("jsx_code")
  cssCode     String?  @map("css_code")
  propsSchema Json     @default("{}") @map("props_schema")
  version     Int      @default(1)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  
  session     Session            @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  versions    ComponentVersion[]
  
  @@map("components")
}

model ComponentVersion {
  id                Int      @id @default(autoincrement())
  componentId       Int      @map("component_id")
  jsxCode           String   @map("jsx_code")
  cssCode           String?  @map("css_code")
  versionNumber     Int      @map("version_number")
  changeDescription String?  @map("change_description")
  createdAt         DateTime @default(now()) @map("created_at")
  
  component         Component @relation(fields: [componentId], references: [id], onDelete: Cascade)
  
  @@map("component_versions")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
